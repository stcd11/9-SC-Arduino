#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Arduino
#+AUTHOR: C. Delport

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stcd11/9-SC-Arduino">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week 1</a></li>
      <li><a href="2_Lesson.html">Week 2</a></li>
      <li><a href="3_Lesson.html">Week 3</a></li>
      <li><a href="4_Lesson.html">Week 4</a></li>
      <li><a href="5_Lesson.html">Week 5</a></li>
      <li><a href="6_Lesson.html">Week 6</a></li>
      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* PTM Control
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:
- We are going to now learn how to include digital control to your Arduino.
- To do this, we will need to connect a PTM switch to your breadboard.
- Look at the photo below to see how to wire the board.
- You will need the following.
 1. 1 X PTM switch
 2. 1 X 10K resistor
 3. 2 X Red single core jump wire
 4. 1 X Black single core jump wire

- Before we can start wiring up the switch, we need to know how the switch is connected.
- The switch is wired in 2 rows, when the button is pushed, all 4 pins are connected.
[[./img/PTM_switch1.jpg]]
[[./img/PTM_wiring_diagram.png]]
- The PTM switch needs to be connected across the gap in the centre of the breadboard.
- It will only fit one way around as the pins are connected in a rectangle shape.
- We are going use the input A5 for the switch. This will need a 10k pull down resistor and connection to power.
- Please note there is a black jump wire at the end of the board to connect ground to the bottom of the breadboard.
[[./img/Switch_added.jpg]]
- Below is the circuit diagram of how you would connect it is it was a Genie microcontroller.
[[./img/CCT_diag_PTM.jpg]]
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- We now need to start coding the switch to control the LED.
- Open up your previous code for the LED.
- First, we need to declare the following variables.
 1. int buttonPin = A5; // This declare which pin the button is connected to.\
 2. int buttonState = 0; // Set the state of the button to low/0
[[./img/Switch_declare.jpg]]
- Next we need to setup the button as an input.
 1. pinMode(buttonPin, INPUT); //This declares the button as an input on A5
[[./img/setup_button_in.jpg]]
- Now we need to add the instructions for the loop.
- First we need to tell the microcontroller that the input it is going to read is a digital input.
 1. buttonState = digitalRead(buttonPin); 
- Next we need to instruct the micrcontroller to look at the state of the input. It will then decide using an if/else statement whether to turn on the output or turn off the output.
 2. if (buttonState == HIGH)
 3. digitalWrite(ledPin, HIGH); // Turn on the LED
 4. else
 5. digitalWrite(ledPin, LOW);  // Turn off LED
[[./img/switch_loop.jpg]]
- Now click the upload button with the Arduino connected.
[[./img/done_uploading.jpg]]
- Below is a video of how it should work.
#+BEGIN_HTML
<iframe width="560" height="315" src="https://www.youtube.com/embed/uDR0eA7YrCU" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
#+END_HTML
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- To complete the badges you will need to Take a photo of your finished program *and* finished breadboard.
- /Silver:/ Upload a screenshot of your switch control sketch and a photo of your finished breadboard.
- /Gold:/ Write a sketch to allow the LED to flash continuously when the switch is pressed and then stop when the switch is pressed again.
- /Platinum:/ Write a code to make the switch turn the LED on permanently and then off permanently each time you press the switch.
