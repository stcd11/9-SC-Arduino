#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: libraries and Examples
#+AUTHOR: C. Delport

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stcd11/9-SC-Arduino">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week 1</a></li>
      <li><a href="2_Lesson.html">Week 2</a></li>
      <li><a href="3_Lesson.html">Week 3</a></li>
      <li><a href="4_Lesson.html">Week 4</a></li>
      <li><a href="5_Lesson.html">Week 5</a></li>
      <li><a href="6_Lesson.html">Week 6</a></li>
      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Libraries
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- The Arduino environment can be extended through the use of libraries, just like most programming platforms. Libraries provide extra functionality for use in sketches, e.g. working with hardware or manipulating data. 
- To use a library in a sketch, select it from Sketch > Include Library.
[[./img/Libraries.jpg]] 
- A number of libraries come installed with the IDE, but you can also download or create your own. 
- See [[https://www.arduino.cc/en/Guide/Libraries][these instructions]] for details on installing libraries. 
- There's also a [[https://www.arduino.cc/en/Hacking/LibraryTutorial][tutorial]] on writing your own libraries. 
- See the [[https://www.arduino.cc/en/Reference/APIStyleGuide][API style guide]] for information on making a good Arduino-style API for your library.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- The Arduino comes with a large number of libraries as standard in the Arduino IDE.
  - EEPROM - reading and writing to "permanent" storage
  - Ethernet / Ethernet 2 - for connecting to the internet using the Arduino Ethernet Shield, Arduino Ethernet Shield 2 and Arduino Leonardo ETH
  - Firmata - for communicating with applications on the computer using a standard serial protocol.
  - GSM - for connecting to a GSM/GRPS network with the GSM shield.
  - LiquidCrystal - for controlling liquid crystal displays (LCDs)
  - SD - for reading and writing SD cards
  - Servo - for controlling servo motors
  - SPI - for communicating with devices using the Serial Peripheral Interface (SPI) Bus
  - SoftwareSerial - for serial communication on any digital pins. Version 1.0 and later of Arduino incorporate Mikal Hart's NewSoftSerial library as SoftwareSerial.
  - Stepper - for controlling stepper motors
  - TFT - for drawing text , images, and shapes on the Arduino TFT screen
  - WiFi - for connecting to the internet using the Arduino WiFi shield
  - Wire - Two Wire Interface (TWI/I2C) for sending and receiving data over a net of devices or sensors. The Matrix and Sprite libraries are no longer part of the core distribution.
- There a many more independently developed libraries which can be found online.

* Examples
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Built-in Examples are sketches included in the Arduino Software (IDE). 
- To open them click on the toolbar menu: File > Examples.
[[./img/Arduino_examples.jpg]] 
- These simple programs demonstrate all basic Arduino commands. 
- They span from a Sketch Bare Minimum to Digital and Analog IO, to the use of Sensors and Displays.
- Click on [[https://www.arduino.cc/en/Tutorial/BuiltInExamples][this link]] to see all of the examples available for you to use. 
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Go to the **Button** example using the File > Examples menu.
- Now try and edit the example to get your arduino to turn on an LED when you press the button.
- If you have time, you can now start to try using the libraries and examples to develop your own great Arduino project.
- Here are some excellent websites to look at to get some inspiration:
  - [[http://www.instructables.com/technology/arduino/][Instructable Arduino]]
  - [[https://www.thingiverse.com/][Thingiverse]]
  - [[https://playground.arduino.cc/Projects/Ideas][Arduino Projects]]
  - [[https://howtomechatronics.com/arduino-projects/][Home to mechanics]]
  - [[https://circuitdigest.com/arduino-projects][Circuit Digest]]
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Take a screenshot of your updated *Button* code that you edited to work with your Arduino.
- Upload the screenshot to [[https://bournetolearn.com/LoginForm.php][www.bournetolearn.com]]


